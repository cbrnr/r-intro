---
title: "9 – Grafiken (2)"
subtitle: "Statistische Datenanalyse mit R"
author: "Clemens Brunner"
date: 2022-12-01
format: html
engine: knitr
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
lang: de
author-title: "Autor"
published-title: "Veröffentlicht"
---

## Das `ggplot2`-Paket

Im Gegensatz zum Base-Plotting-System muss das Paket `ggplot2` installiert und aktiviert werden:

```{r}
library(ggplot2)
```

Dieses Paket ist eine Implementierung der sogenannten [Grammar of Graphics](http://www.springer.com/gp/book/9780387245447), welche statistische Grafiken mit einheitlichen grundlegenden Elementen zu beschreiben versucht. Dies hat den Vorteil, dass man mit dieser Grammatik die unterschiedlichsten Grafiken zusammenbauen kann und nicht für jede Darstellung einen anderen Befehl benötigt.


## Aufbau einer Grafik

Eine Grafik in `ggplot2` besteht aus verschiedenen Ebenen. Jede Ebene beinhaltet geometrische Elemente (*Geoms* genannt) – z.B. Balken, Linien oder Text. Geoms haben ästhetische Eigenschaften (kurz *Aes* genannt), welche das Aussehen von Geoms bestimmen (beispielsweise Farben oder Linienstile). Diese ästhetischen Eigenschaften können global für den gesamten Plot oder für individuelle Ebenen bzw. Geoms definiert werden. Zu diesen Begriffen (Geoms, Aes) folgen später noch Erklärungen. Das folgende Bild veranschaulicht den Aufbau einer Grafik in `ggplot2`:

![](ggplot2.png)


## Die `qplot`-Funktion

Wenn man bereits mit dem Base-Plotting-System vertraut ist, kann man mit der `qplot()`-Funktion sehr ähnlich Grafiken mit dem `ggplot2`-Paket erstellen. Dies hat allerdings den Nachteil, dass man das volle Potenzial von `ggplot2` nicht ausschöpfen kann – für viele Standardgrafiken ist `qplot()` aber eine gute Wahl.

Erstellen wir mit `qplot()` einige beispielhafte Grafiken. Dazu verwenden wir wieder den Datensatz `airquality`. Diese Daten beinhalten diverse Luftgütemessungen in New York im Zeitraum Mai bis September 1973 (siehe dazu `?airquality`). Es ist insbesondere beim Erstellen von Grafiken sinnvoll, wenn wir zunächst aus den beiden Spalten `Month` und `Day` eine neue Spalte namens `date` erzeugen:

```{r}
airquality$date = as.Date(
    paste(airquality$Month, airquality$Day, "1973"),
    format="%m %d %Y"
)
```

Nun verwenden wir `qplot()`, um das Datum auf der x-Achse und die Ozonwerte auf der y-Achse grafisch darzustellen. Diese beiden Spalten kann man direkt als Argumente übergeben:

```{r}
#| warning: false
qplot(airquality$date, airquality$Ozone)
```

Alternativ kann man, wenn sich die Daten als Spalten in einem Data Frame befinden, die Funktion auch wie folgt aufrufen:

```r
qplot(date, Ozone, data=airquality)
```

Dies hat den Vorteil, dass man Spaltennamen direkt angeben kann und nicht `airquality$` voranstellen muss.

Mit dem zusätzlichen Argument `geom="line"` werden die Daten durch eine Linie verbunden:

```{r}
qplot(date, Ozone, data=airquality, geom="line")
```

Dementsprechend kann man zwei beliebige Spalten gegeneinander auftragen und man erhält einen Scatterplot:

```{r}
#| warning: false
qplot(Wind, Ozone, data=airquality)
```

Wenn man einen Faktor übergibt (und das `y`-Argument weglässt), erhält man eine Balkengrafik mit den absoluten Häufigkeiten für jede Faktorstufe:

```{r}
qplot(factor(Month), data=airquality)
```

Übergibt man einen numerischen Vektor für das erste Argument (und lässt das `y`-Argument weg), erhält man ein Histogramm:

```{r}
#| warning: false
#| message: false
qplot(Ozone, data=airquality)
```

Man kann die Breite bzw. Anzahl der Bins auch manuell anpassen:

```{r}
#| warning: false
qplot(Ozone, data=airquality, binwidth=25)
qplot(Ozone, data=airquality, bins=13)
```

Mit dem Argument `geom` kann man die Art der Grafik explizit festlegen. Beispielsweise kann man mit `geom="boxplot"` einen Boxplot erzeugen.

```{r}
qplot(x=1, y=Temp, data=airquality, geom="boxplot")
```

Boxplots sind besonders sinnvoll, wenn man mehrere gleichzeitig darstellt:

```{r}
qplot(x=factor(Month), y=Temp, data=airquality, geom="boxplot")
```

Mit den Argumenten `main`, `xlab` und `ylab` kann man den Titel sowie die Achsenbeschriftungen definieren:

```{r}
qplot(
    x=factor(Month),
    y=Temp,
    data=airquality,
    geom="boxplot",
    main="Boxplots",
    xlab="Month",
    ylab="T (°F)"
)
```


## Die `ggplot()`-Funktion

Das eigentliche `ggplot2`-System wird durch die `qplot()`-Funktion größtenteils versteckt. Stößt man mit `qplot()` an die Grenzen, kann man mit der Grammar of Graphics das volle Potenzial von `ggplot2` nutzen – dazu verwendet man dann die `ggplot()`-Funktion.

Hier ist nun der Aufbau einer Grafik von Bedeutung – d.h. es ist wichtig zu wissen, dass sich eine Grafik aus mehreren Ebenen zusammensetzt. Man beginnt immer mit der Spezifikation der Grafik, d.h. man legt das Data Frame fest, aus dem die darzustellenden Spalten stammen. Außerdem gibt man die Spalten aus diesem Data Frame an, die man plotten möchte.

Im ersten Schritt legen wir also das Data Frame und die Spalten fest:

```{r}
ggplot(airquality, aes(x=Wind, y=Ozone))
```

Hier ist anzumerken, dass die darzustellenden Spalten innerhalb der Funktion `aes()` angegeben werden müssen. Weiters kann man (so wie bei allen Funktionsaufrufen) die Namen der übergebenen Funktionsargumente explizit angeben (`data` und `mapping`), dann ist die Zuordnung bzw. Bedeutung der Argumente sofort klar:

```r
ggplot(data=airquality, mapping=aes(x=Wind, y=Ozone))
```

Die eigentlichen Daten werden noch nicht dargestellt – dafür benötigt man eine neue Ebene mit den gewünschten Geoms. In unserem Beispiel möchten wir Punkte zeichnen, d.h. wir verwenden `geom_point()` dafür und addieren diese zur ersten Ebene (der Zeilenumbruch ist hier nicht notwendig, erhöht aber die Übersicht):

```{r}
#| warning: false
ggplot(data=airquality, mapping=aes(x=Wind, y=Ozone)) +
    geom_point()
```

In weiteren Ebenen kann man dann Titel und Achsenbeschriftungen ändern/hinzufügen:

```{r}
#| warning: false
ggplot(data=airquality, mapping=aes(x=Wind, y=Ozone)) +
    geom_point() +
    ggtitle("Wind vs. Ozone") +
    xlab("Wind (mph)") +
    ylab("Ozone (ppb)")
```

Alternativ kann man alle drei Beschriftungen mit der Funktion `labs()` hinzufügen:

```r
ggplot(data=airquality, mapping=aes(x=Wind, y=Ozone)) +
    geom_point() +
    labs(title="Wind vs. Ozone", x="Wind (mph)", y="Ozone (ppb)")
```

In einer weiteren Ebene kann man dann eine Regressionsgerade (einen sogenannten "Smoother") hinzufügen:

```{r}
#| warning: false
ggplot(data=airquality, mapping=aes(x=Wind, y=Ozone)) +
    geom_point() +
    labs(title="Wind vs. Ozone", x="Wind (mph)", y="Ozone (ppb)") +
    geom_smooth(method="lm", formula="y ~ x")
```

Möchte man z.B. den Monat Mai (entspricht dem Wert 5) hervorheben, kann man eine globale Ästhetik `color` definieren, welche dem logischen Vektor `Month == 5` entspricht (also `TRUE` für alle Zeilen in denen die Spalte `Month` den Wert `5` hat und `FALSE` in allen anderen Fällen):

```{r}
#| warning: false
ggplot(data=airquality, mapping=aes(x=Wind, y=Ozone, color=Month==5)) +
    geom_point() +
    theme(legend.position="none") +
    labs(title="Ozone and Wind in NYC")
```

Es gibt eine große Anzahl an Elementen, aus denen man die unterschiedlichsten Grafiken zusammenbauen kann. Die [offizielle ggplot2-Website](http://ggplot2.tidyverse.org/reference/) hat eine vollständige Liste aller Geoms, Aesthetics und anderer Befehle. Im Folgenden sehen wir uns noch an, wie man Histogramme, Boxplots und Fehlerbalkenplots erzeugen kann.

Ein Histogramm erstellt man mit `geom_histogram()`:

```{r}
#| warning: false
#| message: false
ggplot(data=airquality, mapping=aes(x=Ozone)) +
    geom_histogram() + ylab("")
```

Auch hier kann man die Bingröße manuell angeben:

```{r}
#| warning: false
ggplot(data=airquality, mapping=aes(x=Ozone)) +
    geom_histogram(binwidth=10) + ylab("")
```

Boxplots können mit `geom_boxplot()` erzeugt werden. Um Boxplots gleichzeitig für alle Stufen eines Faktors darzustellen, muss man dies wie folgt spezifizieren (die Spalte `Month` wird zur Darstellung auf der x-Achse in einen Faktor konvertiert):

```{r}
#| warning: false
ggplot(data=airquality, mapping=aes(x=factor(Month), y=Ozone)) +
    geom_boxplot() + xlab("Month")
```

Um einen Fehlerbalkenplot zu erstellen (der die Mittelwerte und deren 95%-Konfidenzintervalle zeigt), kann man die Funktion `stat_summary()` benutzen. Für diese Grafik muss außerdem das Paket `Hmisc` installiert sein.

```{r}
#| warning: false
#| message: false
library(Hmisc)

ggplot(data=airquality, mapping=aes(x=factor(Month), y=Ozone)) +
    stat_summary(fun=mean, geom="point") +
    stat_summary(fun.data=mean_cl_normal, geom="errorbar", width=0.2) +
    xlab("Month")
```


## Themes

Wenn man mit dem generellen Stil der Grafiken nicht zufrieden ist, kann man ein anderes [vordefiniertes Theme](http://ggplot2.tidyverse.org/reference/ggtheme.html) verwenden. Folgende Themes stehen zur Auswahl:

- `theme_gray()`
- `theme_bw()`
- `theme_linedraw()`
- `theme_light()`
- `theme_dark()`
- `theme_minimal()`
- `theme_classic()`
- `theme_void()`

Man aktiviert ein Theme indem man es als eigene Ebene zu einer vorhandenen Grafik hinzufügt:

```{r}
#| warning: false
ggplot(airquality, aes(x=factor(Month), y=Ozone)) +
    stat_summary(fun=mean, geom="point") +
    stat_summary(fun.data=mean_cl_normal, geom="errorbar", width=0.2) +
    xlab("Month") +
    theme_minimal()
```

Alternativ kann man mit der Funktion `theme_set()` ein Theme auch global für alle Grafiken setzen. Alle Grafiken, die danach erzeugt werden, verwenden diesen Stil. Das folgende Beispiel setzt `theme_minimal()` als Standard-Theme:

```{r}
theme_set(theme_minimal())
```


## Patchwork

Möchte man mehrere Grafiken in einem Plot darstellen, bietet sich das Paket `patchwork` an. Damit kann man Plot sehr einfach zu beliebigen Layouts kombinieren:

```{r}
#| warning: false
library(patchwork)

p1 = ggplot(airquality, aes(x=date, y=Ozone)) + geom_line() + geom_point()
p2 = ggplot(airquality, aes(x=Wind, y=Ozone, color=Month==5)) + geom_point()
p3 = ggplot(mpg, aes(x=factor(cyl), y=cty)) + geom_boxplot()

p1 / (p2 + p3)
```

Dabei kennzeichnet `/` eine neue Zeile und `+` eine neue Spalte.


## Übungen

### Übung 1

Laden Sie den Datensatz `penguins` aus dem Paket `palmerpenguins` und erstellen Sie einen Scatterplot der Spalten `bill_length_mm` auf der x-Achse und `bill_depth_mm` auf der y-Achse. Fügen Sie eine Regressionsgerade hinzu. Beschriften Sie die Achsen mit aussagekräftigen Bezeichnungen.


### Übung 2

Laden Sie den Datensatz `penguins` aus dem Paket `palmerpenguins` und erstellen Sie einen Scatterplot der Spalten `bill_length_mm` auf der x-Achse und `bill_depth_mm` auf der y-Achse. Stellen Sie die Punkte der drei Spezies in unterschiedlichen Farben dar. Beschriften Sie die Achsen mit aussagekräftigen Bezeichnungen.

Vergleichen Sie die Regressionsgeraden der einzelnen Spezies mit der Gerade über die gesamten Daten aus Übung 1 – fällt Ihnen etwas auf (Stichwort Simpson-Paradoxon)?


### Übung 3

Laden Sie den in R integrierten Datensatz `Orange` und stellen Sie die Abhängigkeit des Stammumfanges `circumference` (y-Achse) vom Alter `age` (x-Achse) grafisch dar. Stellen Sie die Daten als Punkte dar und verbinden Sie außerdem die Daten eines jeden Baumes (d.h. Sie sollten dann 5 Linien gleichzeitig darstellen, am besten in unterschiedlichen Farben indem Sie das Mapping `color=Tree` verwenden).


### Übung 4

Verwenden Sie den Datensatz `mpg`, welcher automatisch mit `ggplot2` geladen wird. Wie hängt der Hubraum `displ` mit dem Kraftstoffverbrauch `hwy` zusammen? Beantworten Sie diese Frage mit einem Scatterplot und überlagerter Regressionsgerade.


### Übung 5

Verwenden Sie den Datensatz `mpg` und erstellen Sie einen Boxplot, in dem Sie den Kraftstoffverbrauch in Liter pro 100 Kilometer (l/100km) der Zylinderanzahl gegenüberstellen. Erstellen Sie dazu eine neue Spalte `l100km` im Data Frame `mpg`, die den Kraftstoffverbrauch in l/100km aus der Spalte `hwy` (in Meilen pro Gallone, MPG) berechnet. Sie erhalten diesen Verbrauch mit [folgender Formel](https://de.wikipedia.org/wiki/Kraftstoffverbrauch#Umrechnung_zwischen_l/100_km_und_mpg):

$$\text{Verbrauch (in l/100km)} = \frac{235}{\text{Verbrauch (in MPG)}}$$


### Übung 6

Welches Problem hat die Grafik, die Sie in Übung 4 erstellt haben? Wie können Sie dieses Problem mit `ggplot2` umgehen? Sehen Sie sich die Werte der `displ`-Spalte an. In diesem Zusammenhang könnte `geom_jitter()` hilfreich sein.


### Übung 7

Betrachten Sie folgenden Scatterplot mit überlagerter Regressionsgeraden:

```{r}
library(tibble)

df = tibble(x=1:10, y=1:10)

ggplot(data=df, mapping=aes(x=x, y=y)) +
    geom_point(size=4) +
    geom_smooth(method="lm", formula="y ~ x")
```

Die Punkte werden von der Regressionsgeraden überdeckt – wie kann man das verhindern? Die Gerade soll also "hinter" den Punkten gezeichnet werden.
