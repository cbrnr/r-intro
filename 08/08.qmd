---
title: "8 – Visualization"
subtitle: "Statistical Data Analysis with R"
author: "Clemens Brunner"
date: 2025-05-05
format:
  html:
    page-layout: full
engine: knitr
knitr:
  opts_chunk: 
    R.options:
      width: 120
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## Introduction

The R ecosystem offers several excellent packages for data visualizations. The `graphics` package, also known as the base plotting system, is part of R and requires no separate installation. It excels at quick visualizations and, with some additional effort, can also produce beautiful graphics suitable for publication.

The following examples use the `airquality` dataset included in R (a brief description is available with `?airquality`):

```{r}
str(airquality)
```


## The `plot()` function

One of the most important functions in the base plotting system is `plot()`. This function creates appropriate visualizations depending on the data to be displayed.

If the first argument is a numerical vector, the function creates a dot plot, where the x-axis represents the index of the data points and the y-axis represents their values:

```{r}
plot(airquality$Ozone)
```

If you provide two numerical vectors, the function creates a scatter plot, with the first argument on the x-axis and the second on the y-axis:

```{r}
plot(airquality$Wind, airquality$Ozone)
```

The function can also handle date values. First, let's create a new column `date` from the existing columns `Month` and `Day` (from the description, we know that data was collected in 1973):

```{r}
airquality$date = as.Date(
    paste(airquality$Month, airquality$Day, "1973"),
    format="%m %d %Y"
)
```

:::{.callout-tip}
The `paste()` function concatenates multiple character vectors element-wise into a single vector, inserting a space between elements by default:

```{r}
paste("Hello", "World")
```

The individual arguments can be vectors of any size:

```{r}
paste(c("Hello", "Sup"), c("Jane", "John"))
```
:::

The result looks like this:

```{r}
paste(airquality$Month, airquality$Day, "1973")
```

This vector can then be converted into a date vector using the `as.Date()` function with the argument `format="%m %d %Y"`, which we assigned to the `date` column in the data frame:

```{r}
class(airquality$date)
```

Now we can use this column for the x-axis. In this example, the month names are automatically displayed on the x-axis:

```{r}
plot(airquality$date, airquality$Ozone)
```

If the first argument is a factor, the function produces a bar chart with the frequencies of the individual levels:

```{r}
plot(factor(airquality$Month))
```


## Histograms

The `hist()` function creates a histogram of a vector:

```{r}
hist(airquality$Ozone)
```

::: {.callout-tip}
A histogram visualizes the distribution of values in a vector. By default, it shows the absolute frequency (count) of values in each bin. Alternatively, setting `freq=FALSE` shows the probability density (proportion) of values in each bin (where the total area of the histogram sums to 1). The number of bins is determined automatically by default.
:::

We can explicitly set the number of bins in the histogram with the `breaks` argument:

```{r}
hist(airquality$Ozone, breaks=12)
```

:::{.callout-note}
The `breaks` argument is only a recommendation if we provide a single number – the actual number of bins is adjusted to keep the plot readable. However, we can provide a vector of breakpoints to define the bin edges explicitly (for example, `breaks=seq(0, 200, by=20)` will use exactly these breaks).
:::

The same histogram showing probability densities can be created with:

```{r}
hist(airquality$Ozone, breaks=12, freq=FALSE)
```


## Boxplots

Another way to summarize the distribution of values is the `boxplot()` function. A boxplot includes the median, the interquartile range (IQR), as well as the minimum and maximum (plus any outliers) of the data. Here is an example of a boxplot for the `Temp` column:

```{r}
boxplot(airquality$Temp)
```

However, a single boxplot is relatively uninformative. If we pass a *formula* instead of a vector, we can create multiple boxplots in a single plot.

:::{.callout-note}
A formula is defined by the tilde character (`~`) with expressions on its left and right sides. An example of a formula is `y ~ x`, with `y` on the left side and `x` on the right side. The meaning of a formula depends on the specific function. Many functions require formulas as arguments, and we will use formulas extensively when calculating linear models.
:::

The following example creates boxplots for `airquality$Temp` separately for all levels of `airquality$Month`:

```{r}
boxplot(airquality$Temp ~ airquality$Month)
```

In this case, the left side of the formula determines the values on the y-axis, and the right side determines the values on the x-axis.


## Adjusting plots

Often, we need to adjust various plot properties, such as line types, colors, symbols, titles, axis labels, and so on. Many parameters can be passed as arguments when creating the plot. For example, we could modify the previous scatter plot example as follows:

```{r}
plot(
    airquality$Wind,
    airquality$Ozone,
    xlab="Wind (mph)",  # x-axis label
    ylab="Ozone (ppb)",  # y-axis label
    main="New York City air quality (1973)",  # title
    pch=21,  # circle with border
    bg="lightblue"  # background color
)
```

We can improve the visualization of the ozone values over time by setting the following arguments (here, the `type` argument specifies the [plot type](http://www.statmethods.net/graphs/line.html); in this example, we set it to `"l"`, which corresponds to a line plot):

```{r}
plot(
    airquality$date,
    airquality$Ozone,
    xlab="",
    ylab="Ozone (ppb)",
    main="",  # no title
    type="l",  # line plot
    col="orange"
)
```

This line plot also clearly shows missing values in the data (where the line is interrupted).

The various plot functions have many common parameters that can be used to influence the aesthetics of the plots. In the previous examples, we adjusted the following parameters:

* `xlab`: x-axis label
* `ylab`: y-axis label
* `type`: [plot type](http://www.statmethods.net/graphs/line.html) (lines, dots, both, ...)
* `pch`: [symbol](http://www.cookbook-r.com/Graphs/Shapes_and_line_types/) (circle, triangle, square, ...)
* `main`: title
* `col`: color

The `par()` function can be used to query or globally set parameters related to plots (the documentation `?par` provides a description of all supported parameters). Calling this function without arguments lists current values of all parameters. Individual parameters can also be modified, affecting all subsequent plots, which will use the updated values.

The following example demonstrates the use of `par()`. First, we query the current value of the `col` parameter (i.e., the color). This works with the `$` notation (which is similar to extracting columns from a data frame):

```{r}
par()$col
```

We observe that the color is set to black. This is also confirmed by a small example plot, which consists of black elements by default:

```{r}
plot(sin(seq(0, 2*pi, length.out=50)), type="o", xlab="", ylab="")
```

After globally setting the color to red, all subsequent plots will use this value by default:

```{r}
par(col="red")
par()$col
plot(sin(seq(0, 2*pi, length.out=50)), type="o", xlab="", ylab="")
```

Before creating additional plots, we will reset the color to black:

```{r}
par(col="black")
```

Other commonly used parameters include `lty` (line type) and `cex.axis` (size of the axis labels):

```{r}
plot(
    sin(seq(0, 2*pi, length.out=50)),
    type="l",
    xlab="",
    ylab="",
    cex.axis=0.6,  # axis label size
    lty=2,  # line type
    main="Sine"
)
```

The following line types are possible values for `lty`:

 `lty`  Type
------  ----
0       empty (no line)
1       solid (default)
2       dashed
3       dotted
4       dot–dash
5       long dash
6       short dash–long dash

The documentation of the `points()` function lists all available symbols for `pch`. The `cex.axis` scales axis labels, with a default value of 1 – values below 1 shrink the labels, while values above 1 enlarge them.


## Adding elements to plots

The base plotting system allows creating a plot first and adding graphical elements afterward. To do this, we use specific functions that we will discuss below.

We can add a title with `title()`:

```{r}
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in NYC")
```

:::{.callout-tip}
This example also uses the `with()` function, which enables us to use column names from a data frame *directly* within the parentheses. For example, instead of `airquality$Ozone`, we can write `Ozone`. This means that the first line of the example is equivalent to `plot(airquality$Wind, airquality$Ozone)`. However, note how the default axis labels depend on the x and y arguments!
:::

We can add points with `points()`. This can be used, for example, to display groups of data in different colors. We start with an empty plot (`type="n"`) and then add points with different colors and symbols. The `legend()` function adds a legend:

```{r}
with(airquality, plot(Wind, Ozone, main="", type="n"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col="red", pch=20))
with(subset(airquality, Month == 5), points(Wind, Ozone, col="blue", pch=17))
legend(
    "topright",
    pch=c(17, 20),
    col=c("blue", "red"),
    legend=c("May", "Other Months")
)
```

We can add a regression line with the `abline()` function:

```{r}
with(airquality, plot(Wind, Ozone, main="", pch=20))
model = lm(Ozone ~ Wind, airquality)
abline(model, lwd=2, col="blue")
```

Here, we pass the line as a linear model computed by `lm()`, which we will learn more about later in this course. For now, it is sufficient to know that this function expects a formula of the form `y ~ x`, where we specify the column names corresponding to the y and x axes.

We can add text and arrows with `text()` and `arrows()`, respectively:

```{r}
with(airquality, plot(Wind, Ozone, main="", pch=20))
text(15, 100, "Label")
arrows(14.5, 90, 14, 75, length=0.1)
```


## Displaying raw data

There are many ways to visualize the distribution of a (numerical) variable (e.g., histograms and boxplots). In principle, we should always include the raw data in the plot in addition to summary statistics (such as mean, median, dispersion, and so on). This is possible with the `stripchart()` function.

Let's take the `airquality$Ozone` column as an example. We could display only its mean in a bar chart, but this would not be very informative:

```{r}
barplot(mean(airquality$Ozone, na.rm=TRUE))
```

A boxplot would be slightly better:

```{r}
boxplot(airquality$Ozone)
```

The best option is to include the raw data in the plot with the `stripchart()` function:

```{r}
boxplot(airquality$Ozone)
stripchart(
    airquality$Ozone,
    vertical=TRUE,
    add=TRUE,
    pch=19,
    col=rgb(0, 0, 0, 0.25)
)
```

Note that `add=TRUE` must be passed to add the points from `stripchart()` to an existing plot (otherwise, the function creates a new plot).

Here is a complete example with boxplots for each month and the underlying raw data:

```{r}
with(airquality, boxplot(Ozone ~ Month))
stripchart(
    airquality$Ozone ~ airquality$Month,
    vertical=TRUE,
    add=TRUE,
    pch=19,
    col=rgb(0, 0, 0, 0.25)
)
```


## Combining multiple plots

We can display multiple plots side by side (or in any rectangular grid) using the global `mfrow` or `mfcol` parameters. Specifically, we set the corresponding argument to a vector with two elements, which indicates the number of rows and columns to reserve for subsequent plots. For example, `mfrow=c(3, 2)` corresponds to three rows and two columns, resulting in a total of six plots. Then we can create the corresponding number of plots with various functions such as `plot()`, `hist()`, `boxplot()`, and so on. We use `mfrow` if we want to fill the grid row by row or `mfcol` if we want to fill it column by column.

```{r}
par(mfrow=c(1, 2))  # 1 row, 2 columns
with(airquality, plot(Wind, Ozone, main="Ozone and Wind", pch=20))  # plot 1
with(airquality, plot(Solar.R, Ozone, main="Ozone and Solar Radiation", pch=20))  # plot 2
```

Once the plots are complete, it is advisable to reset the global parameter so that the next plot consists of a single visualization:

```{r}
par(mfrow=c(1, 1))
```

We can also use the `layout()` function to create more complex layouts. Here, we specify a matrix that contains the identifiers of the plots to be displayed. For example, to display three plots in two rows and two columns, with the first plot spanning both columns in the first row, we define the matrix as follows:

```{r}
(grid = matrix(c(1, 1, 2, 3), nrow=2, ncol=2, byrow=TRUE))
```

Now we apply this layout using the `layout()` function and create the three plots one after the other:

```{r}
#| fig-width: 7
#| fig-height: 9
layout(grid)
plot(
    airquality$date,
    airquality$Temp,
    type="l",
    xlab="",
    ylab="Temperature (°F)",
    main="Temperature"
)
plot(
    factor(airquality$Month),
    main="Measurements per month",
    xlab="Month",
    ylab="Count",
    col="lightblue"
)
plot(
    airquality$Temp,
    airquality$Ozone,
    type="n",
    xlab="Temperature (°F)",
    ylab="Ozone (ppb)",
    main="Ozone vs. Temperature"
)
abline(lm(Ozone ~ Temp, airquality), col="orange", lwd=2)
points(airquality$Temp, airquality$Ozone, pch=16, col=rgb(0, 0, 0, 0.5))
```

:::{.callout-note}
Specifying the color as `col=rgb(0, 0, 0, 0.5)` in the last example defines the color black using the first three values (RGB, i.e., red, green, and blue) and the transparency using the fourth value (1 means opaque and 0 means completely transparent – 0.5 is therefore semi-transparent).
:::

After creating the plot, we should reset the parameter, either as shown above with `par(mfrow=c(1, 1))` or simply with:

```{r}
layout(1)
```


## Exercises

### Exercise 1

Load the `penguins` dataset from the `palmerpenguins` package and create a scatter plot of the `bill_length_mm` column on the x-axis and the `bill_depth_mm` column on the y-axis. Label the axes with meaningfully!


### Exercise 2

Recreate the scatter plot from Exercise 1, but this time display the points of the three species in different colors and add an appropriate legend. You can, for example, first create an empty plot with the argument `type="n"` and then use `points()` to add data points for the three species in different colors.


### Exercise 3

Inspect the `ToothGrowth` dataset (make sure to read its documentation) and create a meaningful plot. Use functions we have discussed in this session (i.e., `plot()`, `hist()`, or `boxplot()`) – of course, multiple plots per figure are also encouraged (using `par(mfrow)` or `layout()`)!


### Exercise 4

Use the `mtcars` dataset and create a boxplot of the `mpg` variable depending on `cyl`. Which vehicles consume more or less fuel? Pay attention to the correct interpretation of fuel consumption in MPG (miles per gallon)!


### Exercise 5

Combine the following three plots in a single figure using the `mtcars` dataset:

1. Scatter plot of `mpg` against `drat`
2. Boxplot of `mpg` depending on `cyl` (see Exercise 4)
3. Histogram of `mpg`

Use a suitable arrangement of the three plots (e.g., using `layout()`)!
