---
title: "2 – The R Environment"
subtitle: "Statistical Data Analysis with R"
author: "Clemens Brunner"
date: 2025-03-10
format:
  html:
    page-layout: full
engine: knitr
knitr:
  opts_chunk: 
    R.options:
      width: 120
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## RStudio

In the previous lesson, we installed and used the graphical user interface RStudio. RStudio requires a working installation of R. By default, RStudio's window is divided into four sections (though sometimes only three are visible):

1. The *Console* is located at the bottom left. This is where R waits for our input.
2. The editor is at the top left (if at least one file is open). Otherwise, the console occupies this space.
3. The top right shows an overview of all loaded objects (*Environment*) and a list of all previously entered commands (*History*). You can also access the history in the console using the <kbd>↑</kbd> or <kbd>↓</kbd> keys and even edit previous commands before pressing <kbd>Enter</kbd> again.
4. The bottom right displays the current directory's contents (*Files*), graphical outputs (*Plots*), a package manager (*Packages*), and a help browser (*Help*).

![](rstudio.png)

::: {.callout-tip}
You can extensively adjust the layout in the settings. For example, if you prefer having the console at the bottom right, you can configure it there.
:::

::: {.callout-important}
Most of RStudio's settings have reasonable default values, but you should definitely change the following two settings. Go to the settings (*Tools* – *Global Options*) and modify these options:

1. "Restore .RData into workspace at startup" should be *disabled*.
2. "Save workspace to .RData on exit" should be set to *Never*.

![](rstudio-settings.png)

This ensures that each restart of RStudio generates a completely fresh R session, which is crucial for reproducibility of analyses.
:::


## Packages

Packages extend the functionality of R, which comes with only a handful of packages by default. When that's not enough, you can easily add more. Most additional packages are available through the [Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/web/packages/). Once a package is *installed*, it can be *activated* and used at any time. This means two dependent steps must be followed:

1. Install a new package (just once).
2. Activate an installed package (before each use, i.e., once per R session).

There are thousands of packages in CRAN, which can make finding the right one difficult. A practical overview is available on [CRAN Task Views](https://cran.r-project.org/web/views/), where packages are grouped thematically by application area. Additionally, searching the internet for a specific topic in combination with the search term "R" often leads to the desired package.

You can manage packages either through the *Packages* pane in RStudio or by using R commands.


### Package management in RStudio

In RStudio, the *Packages* pane (in the bottom right panel) shows a list of all installed packages. You can also see which packages are currently activated (by checking/unchecking the box next to a package, you can activate/deactivate a package).

In this view, you can click *Update* to update installed packages, which should be done periodically (regardless of R version updates, which follows an independent release schedule).

To install new packages, click *Install*. When you type the first few letters of a package's name into the *Packages* field, a list of all matching packages will appear. You can uninstall an already installed package by clicking the gray "X" symbol in the right column of the package list.

![](rstudio_packages.png)


### Package management with R commands

In principle, R is controlled via text commands in the console. Therefore, it is not surprising that package management can also be done using special R commands. In fact, package management using the RStudio *Packages* pane simply runs the corresponding R commands in the background (which you can see in the console).

To list all installed packages, type:

```{r}
library()
```

This list corresponds to the one shown in RStudio's *Packages* pane. To list all active (loaded) packages, type:

```{r}
search()
```

To install a new package from CRAN (e.g., `psych`), type:

```r
install.packages("psych")
```

Note that the name of the package to be installed must be in quotation marks. To activate an already installed package, type:

```r
library(psych)
```

In this case, you can omit the quotation marks around the package name.


## The R programming language

### Scripts

Typing commands directly into the R console is convenient for trying things out interactively or performing quick calculations. However, for reproducible data analysis, it's best to save the necessary commands in an R script so that you can repeat the analysis at any time. An R script is simply a plain text file with the extension `.R`.

Each line of an R script typically contains a single R command. When you run the script, all lines are executed sequentially from top to bottom. In RStudio, you can execute an entire script by clicking the "Source" button (or "Source with Echo"). To run just the current line or selected lines, click "Run" (you can also use the shortcut <kbd>Ctrl</kbd><kbd>Enter</kbd> on Windows/Linux or <kbd>⌘</kbd><kbd>Enter</kbd> on macOS). Conveniently, the cursor jumps to the next command in the script, which can then be executed if desired.

![](rstudio-run-code.png)

::: {.callout-tip}
If your script uses commands from additional packages, you *must* activate each single package with `library(package)`. It's best to do this at the top of the script.
:::

::: {.callout-important}
*Never* install packages in a script (using `install.packages("package")`)! The package would be reinstalled every time you run the script (including downloading it from the internet), which should be avoided. Package installation should always be done manually, as described earlier, in RStudio or the console.
:::


### Working directory

To get the working directory (i.e., the directory where the current R session is running), use the following command:

```{r}
#| eval: false
getwd()
```

The working directory is important, because R expects files (such as scripts or data) to be located in this (or relative to this) directory. You can display all files in the current working directory using `dir()` (RStudio also shows this in the bottom right *Files* pane).

::: {.callout-tip}
The title of *Console* pane in RStudio also shows the current working directory. The name `~` is shorthand for your personal user folder (folder and directory are used interchangeably).
:::

The command `setwd("/path/to/working/directory")` sets the current working directory to the specified path (e.g., `/path/to/working/directory` in this case). Note that directories on Windows must also be separated by forward slashes `/` as opposed to backslashes `\`.

In RStudio, there are at least three alternatives to set the working directory using the graphical interface:

- Menu *Session* – *Set Working Directory* – *Choose Directory...*
- Navigate to the desired directory in the *Files* pane (bottom right), then click *More* – *Set As Working Directory*
- If a script file is open in the editor pane, you can right-click the file name in the tab and choose *Set Working Directory* (this sets the working directory to the folder where the script is saved).

![](set-working-directory.png){width=300}

::: {.callout-important}
Before running a script, you should set the working directory correctly (usually to the folder where the script is saved). However, don't automate this in the script itself, as the script should also run in other environments where your specific directory may not exist. This means that you should never include `setwd()` in your scripts!
:::

:::{.callout-tip}
If you open an R script by double-clicking (in Windows Explorer or macOS Finder), RStudio will open and automatically set the working directory to the folder where the script is located.
:::


### Workspace

All objects that you create or load (variables and data) are referred to as the *workspace*. You can display it with the following command:

```{r}
#| eval: false
ls()
```

In a fresh R session, the workspace is empty (if it isn't, you likely didn't set the options correctly as described previously). This behavior is crucial for the reproducibility of analyses. In RStudio, the workspace is also displayed in the *Environment* pane (top right).


### Syntax

Syntax refers to the rules for creating valid R commands from individual characters. To learn R's syntax, let's examine the following short example:

```r
# compute sum of integers from 1 to 100
n = 100
x = 1:n
sum(x)
n * (n + 1) / 2  # closed-form solution
```

Even in these few lines, we can already observe the basic rules. In principle, each command is written on its own line.


#### Comments

Comments, i.e., all characters from `#` to the end of the line, are *not* executed by R, but simply ignored. Nevertheless, comments are extremely important, because they help explain and understand the code — therefore, always add explanatory comments to more complex calculations!


#### Variables and objects

The assignment operator in R is either `=` or `<-`. You use it to assign values (often referred to as objects) to *variables*, which you can then reuse (e.g., for further calculations). In the example, `n = 100` assigns the value `100` to the variable `n`. Thus, the example script creates two variables `n` and `x`.

:::{.callout-note}
It doesn't matter whether you use `=` or `<-` for assignments. However, you should be consistent and always use just one of the two operators. These materials use `=`, because it's quicker to type and most other programming languages also use `=`.
:::

R is case-sensitive, meaning the variable `N` is not the same as `n`. In addition to letters, variable names can include numbers, underscores, and even periods (though this is not recommended).


#### Functions

A function is a mini-script that you can execute by *calling* it. In the example above, `sum` is a function. To call a function, a *pair of parentheses* `()` is needed after the function name. Any arguments (needed if the function requires additional information) are passed *within* the parentheses (multiple arguments are separated by commas `,`).

For example, the command `sum(x)` calls the function `sum` with the argument `x`. Some functions don't require arguments, but the parentheses are still always necessary (e.g., `library()` calls the library function with no arguments). Other examples of function calls without arguments that we've already encountered are `search()`, `getwd()`, `dir()`, and `ls()`.

:::{.callout-note}
In these materials, function names are always followed by parentheses `()` to indicate that they are functions.
:::

With objects and functions, we've already covered the two most important concepts in R. In summary (from [John M. Chambers, Extending R, Chapman & Hall/CRC, 2016](https://www.taylorfrancis.com/books/mono/10.1201/9781315381305/extending-john-chambers)):

- Everything that *exists* in R is an *object*.
- Everything that *happens* in R is a *function call*.


### Documentation

R comes with extensive integrated documentation (which is also available offline). RStudio displays documentation in the *Help* panel (lower right). There are two options to get help for a specific R command directly in the R console (the following example demonstrates this for the `sum()` function):

```r
help(sum)
?sum
```


#### Example 1

Let's inspect the documentation for `sum()` more closely, because all help pages are organized in a similar way. It is a good habit to quickly skim the help text for every function that you are about to use for the first time – this will get you started much quicker than just assuming things (that might not be true) or filling in arguments by trial and error.

The very first line contains the name of the function and the package it comes from in curly braces:

```
sum {base}
```

We now know that the `sum()` function is contained in the `base` package.

Next, the title summarizes the purpose of the function:

```
Sum of Vector Elements
```

The "Description" section contains a slightly more detailed summary of what the function is all about.

"Usage" describes how to call the function:

```
sum(..., ra.rm = FALSE)
```

We already know that we have to write the function name followed by a pair of parentheses. In addition, this section also tells us which arguments we can pass – in this case, there are two possible arguments (`...` and `na.rm`). The second argument `na.rm` has a default value of `FALSE`, which means that if we do not pass a second argument in our function call, `na.rm` automatically gets its default value of `FALSE`.

More details for each argument are listed in the subsequent "Arguments" section. In this example, we learn that `...` should be "numeric or complex or logical vectors" (we'll learn about vectors soon). In fact, `...` is special and allows us to pass an arbitrary number of arguments to the function.

The next section contains a very detailed description of the function. If you want to understand what is going on when you call the function, you need to read this.

The "Value" section tells us what the function *returns* (what it computes). Often, the help text includes some useful references such as books or articles. Many functions also include a "See Also" section, which lists similar and related functions.

Last but definitely not least, most help pages contain several usage examples. You can copy and paste them into the console to try them out and see the examples in action.


#### Example 2

Let's take a look at another help page, this time we'll view the documentation of `mean()`:

```r
?mean
```

We learn that this function computes the arithmetic mean, and we can use it like this:

```
mean(x, trim = 0, na.rm = FALSE, ...)
```

The first parameter `x` is a (numeric) vector containing the numbers we want to average. The next two parameters (`trim` and `na.rm`) both have default values, so we don't need to specify values if we are happy with the defaults. The fourth parameter `...` summarizes "further arguments" that are not really explained.

:::{.callout-note}
Function parameters and arguments are often used synonymously, but there is a difference: a *parameter* is formally defined in the function header, and when we *call* a function, we pass *arguments* that replace parameters with *specific values*.

For example, the `mean()` function has several parameters, and the first parameter is called `x`. When we call the function using `mean(1:10)`, we pass the argument `1:10`, which is used instead of `x` everywhere inside the function to compute the mean.
:::

Let's try some examples to see the different ways we can call the `mean()` function. Let's assume we have a numeric vector (a collection of numbers, more on that in the next chapter) stored in the variable `numbers`:

```{r}
numbers = c(1, 8, 17, -6, 5.5, -12.2)
```

We can compute the arithmetic mean like this:

```{r}
mean(numbers)
```

Optionally, we can explicitly name arguments in our function call. The first parameter is called `x`, so we could write:

```{r}
mean(x=numbers)
```

The same is true for the other arguments; we can either pass values by position or by name:

```{r}
mean(numbers, trim=0.25)
mean(numbers, 0.25)
mean(x=numbers, trim=0.25)
mean(x=numbers, 0.25)
mean(trim=0.25, x=numbers)
```


## Literature

### Books

- [Discovering Statistics Using R](https://uk.sagepub.com/en-gb/eur/discovering-statistics-using-r/book236067)
- [OpenIntro Statistics](https://www.openintro.org/book/os/)
- [Learning Statistics With R](https://learningstatisticswithr.com/)
- [R for Data Science](https://r4ds.had.co.nz/)
- [Advanced R](https://adv-r.hadley.nz/)


### Tutorials and documentation

- [learnr](https://rstudio.github.io/learnr/)
- [RStudio Education](https://education.rstudio.com/learn/beginner/)
- [An Introduction to R](https://cran.r-project.org/doc/manuals/r-release/R-intro.html)
- [Quick-R](http://www.statmethods.net/)
- [R Documentation](http://www.rdocumentation.org/)
- [Rtips](http://pj.freefaculty.org/R/Rtips.html)
- [Cookbook for R](http://www.cookbook-r.com/)


### Online courses

- [Statistics and R](https://www.edx.org/course/statistics-and-r)
- [R Programming](https://www.coursera.org/learn/r-programming)
- [Statistics with R Specialization](https://www.coursera.org/specializations/statistics)
- [Mastering Software Development in R](https://www.coursera.org/specializations/r)


### Articles

If you're interested in the historical development of R, you can find an overview by John M. Chambers, one of the co-developers of R, [here](https://dl.acm.org/doi/10.1145/3386334).


## Exercises

### Exercise 1

Install the packages `tidyverse`, `Hmisc`, and `psych` – which R commands do you use? Name the version numbers of these packages. Which commands can you use to activate the installed packages?


### Exercise 2

Display the help for the `help()` function. What are the two options?


### Exercise 3

What does a function call in R look like?


### Exercise 4

Create a simple script in RStudio named `my_first_script.R`. Include the following elements in this script:

- A comment line with the content "Exercise 4"
- Activate the package `Hmisc`
- Calculate the mean of the numbers 45, 66, 37, 54, 7, and 22 (using only basic arithmetic)

The script should consist of three lines (you may add additional empty lines for clarity).

Run the entire script to check for errors – it should run without any issues!


### Exercise 5

Read the documentation for the `sum()` function and answer the following questions:

- How many mandatory arguments does this function require?
- How many optional arguments does this function have?
- What is the result of `sum()` and why (also consider the result of `mean()`)?
- Explain why `sum(1, 2, 3)` produces the correct result, but `mean(1, 2, 3)` does not!
- What happens if you execute `sum` in the console (i.e., without parentheses)?
