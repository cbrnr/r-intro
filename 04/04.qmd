---
title: "4 – Tabellarische Daten"
subtitle: "Statistische Datenanalyse mit R"
author: "Clemens Brunner"
date: 2025-10-23
format:
  html:
    page-layout: full
engine: knitr
knitr:
  opts_chunk: 
    R.options:
      width: 120
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
lang: de
author-title: "Autor"
published-title: "Veröffentlicht"
---

## Allgemeines

Vektoren werden in R verwendet, um eindimensionale Daten abzubilden. Häufig sind Daten aber zweidimensional strukturiert, also in Form einer Tabelle. Für tabellarische Daten gibt es in R zwei gängige Datentypen, nämlich *Matrizen* (Einzahl *Matrix*) und sogenannte *Data Frames*. Matrizen können genau wie Vektoren nur Elemente eines einzigen Datentyps enthalten (sie sind also homogene Datentypen). Im Gegensatz dazu können Data Frames Spalten mit unterschiedlichen Datentypen enthalten.


## Matrizen

### Zusammenhang mit Vektoren

Matrizen sind Vektoren mit einem speziellen Dimensionsattribut, welches man mit der Funktion `dim()` abfragen und setzen kann:

```{r}
(v = 1:20)  # Vektor
dim(v)
length(v)
```

Ein "normaler" Vektor hat *kein* Dimensionsattribut, daher wird hier `NULL` angezeigt.

Nun kann man für einen Vektor das Dimensionsattribut auf die gewünschte Anzahl an Zeilen und Spalten setzen (das Produkt von Zeilen und Spalten muss mit der Gesamtanzahl an Elementen im Vektor übereinstimmen):

```{r}
dim(v) = c(4, 5)  # 4 Zeilen, 5 Spalten
```

Nun besitzt `v` also ein Dimensionsattribut:

```{r}
dim(v)
```

Tatsächlich wird `v` ab jetzt auch als Matrix mit 4 Zeilen und 5 Spalten dargestellt:

```{r}
v
```

Und der Typ von `v` lautet jetzt:

```{r}
class(v)
```

Dieses Beispiel soll zeigen, dass sich die zugrundeliegenden Daten (welche nach wie vor als Vektor vorliegen) *nicht* ändern – sie werden durch das Dimensionsattribut lediglich anders dargestellt bzw. interpretiert.

:::{.callout-note}
Mit dem Dimensionsattribut kann man beliebig viele Dimensionen erstellen, nicht nur Matrizen mit zwei Dimensionen. Man spricht dann von Arrays, und eine Matrix ist ein spezielles Array mit zwei Dimensionen. Daher lautet die Ausgabe von `class(v)` im vorigen Beispiel auch `"matrix" "array"`.
:::


### Erstellen von Matrizen

Eine Matrix kann nicht nur aus einem bereits vorhandenen Vektor, sondern auch direkt mit der Funktion `matrix()` erzeugt werden:

```{r}
(m = matrix(1:20, nrow=4, ncol=5))
```

Das erste Argument sind die Daten (ein Vektor), die die Matrix enthalten soll. Das zweite Argument `nrow` ist die Anzahl der Zeilen, und das dritte Argument `ncol` ist die Anzahl der Spalten der Matrix. Die ursprünglichen Daten werden standardmäßig *spaltenweise* in der Matrix angeordnet. Möchte man die Daten *zeilenweise* anordnen, kann man das Argument `byrow=TRUE` setzen:

```{r}
matrix(1:20, nrow=4, ncol=5, byrow=TRUE)
```


### Benennen von Zeilen und Spalten

So, wie man einen Vektor mit benannten Elementen erstellen kann, kann man in einer Matrix Zeilen- und Spaltennamen vergeben:

```{r}
rownames(m) = c("one", "two", "three", "four")
colnames(m) = c("A", "B", "C", "D", "E")
m
```


### Indizieren

Das Herausgreifen einzelner Elemente funktioniert im Prinzip gleich wie bei Vektoren: mit eckigen Klammern. Der Hauptunterschied ist, dass man bei Matrizen *zwei* Indizes (getrennt mit einem Komma) angibt: der erste Index entspricht den *Zeilen* und der zweite entspricht den *Spalten*. Wenn der erste Index weggelassen wird, werden alle Zeilen herausgegriffen. Wenn der zweite Index weggelassen wird, werden alle Spalten herausgegriffen.

Die folgenden Beispiele illustrieren das Indizieren einer Matrix:

```{r}
m
m[1, 4]  # 1. Zeile, 4. Spalte
m[, 3]  # 3. Spalte
m[3,]  # 3. Zeile
m[c(2, 4),]  # 2. und 4. Zeile
m[c(1, 3), c(1, 2, 5)]  # Zeilen 1 und 3, Spalten 1, 2 und 5
m[, "C"]  # Spalte C
m["two",]  # Zeile "two"
m[m[, "A"] > 2,]  # Zeilen, in denen die Spalte A > 2 ist
```

Das letzte Beispiel ist in der Praxis sehr wichtig, da man so Zeilen aus einer Matrix filtern kann. Stellen Sie daher sicher, dass Sie diese Art der Indizierung verstehen – wir werden sie noch öfter brauchen!


### Zwang (Coercion)

Wenn man einer numerischen Matrix z.B. eine neue Spalte vom Typ `character` hinzufügen möchte, dann funktioniert das nicht wie gewünscht, denn die numerischen Elemente werden automatisch in Zeichenketten umgewandelt (es handelt sich bei einer Matrix ja um einen homogenen Vektor). Wir werden sehen, dass Data Frames besser geeignet sind, wenn man unterschiedliche Spaltentypen benötigt.

```{r}
subjects = c("Hans", "Birgit", "Ferdinand", "Johanna")
cbind(subjects, m)
```

Anhand dieses Beispiels sieht man auch eine weitere Möglichkeit, wie man Matrizen erstellen bzw. erweitern kann. Die Funktion `cbind()` hängt Vektoren (oder Matrizen) *spaltenweise* zusammen, während analog dazu die Funktion `rbind()` Objekte *zeilenweise* zusammenfügt.


### Rechnen mit Matrizen

Genau wie bei Vektoren werden Rechenoperationen mit Matrizen *elementweise* durchgeführt. Zusätzlich gibt es noch praktische Funktionen, mit denen man die Zeilen- bzw. Spaltensummen einer Matrix berechnen kann, nämlich `rowSums()` und `colSums()`:

```{r}
rowSums(m)
colSums(m)
```

Analog dazu gibt es auch noch `rowMeans()` bzw. `colMeans()` zur Berechnung der Zeilen- bzw. Spaltenmittelwerte.

Eine Matrix ist, wie man anhand der obigen Beispiele erkennt, eigentlich nur für rein numerische Daten geeignet. Oft will man aber auch nicht-numerische Spalten wie z.B. Namen oder Gruppenzugehörigkeiten hinzufügen – dies funktioniert wie oben gezeigt mit Matrizen praktisch nicht, weil dann alle Elemente in den Typ  `character` konvertiert werden.


## Data Frames

Data Frames sind ebenso wie Matrizen zweidimensionale Datenstrukturen (sie bestehen aus Zeilen und Spalten). Im Gegensatz zu Matrizen können Spalten aber unterschiedliche Datentypen haben (z.B. kann eine Spalte numerisch sein, eine andere Spalte kann Zeichenketten beinhalten, und so weiter). Innerhalb einer Spalte müssen aber alle Werte homogen sein. Man kann sich die einzelnen Spalten in einem Data Frame daher als Vektoren vorstellen.

:::{.callout-note}
Tatsächlich ist ein Data Frame eine Liste aus Vektoren gleicher Länge, welche den einzelnen Spalten entsprechen (den allgemeinen Datentyp `list`, welcher hier im Hintergrund verwendet wird, werden wir allerdings nicht genauer kennenlernen).
:::


### Erstellen von Data Frames

Mit der Funktion `data.frame()` kann man ein Data Frame spaltenweise aus einzelnen Vektoren erzeugen, indem man die einzelnen Spalten als (benannte) Argumente übergibt:

```{r}
data.frame(x=1:5, id=c("X", "c1", "V", "RR", "7G"), value=c(12, 18, 19, 3, 8))
```

Für die Spaltennamen werden automatisch die jeweiligen Argumentnamen verwendet, so entstehen die Spaltennamen `x`, `id` und `value`.

Alternativ kann man die Funktion `data.frame()` ähnlich wie `cbind()` verwenden, um Vektoren und/oder zweidimensionale Objekte (wie Matrizen) spaltenweise aneinanderzuhängen:

```{r}
(df = data.frame(subjects, m))
```

Wie bei Matrizen kann man mit der Funktion `colnames()` die Spaltennamen lesen bzw. setzen:

```{r}
colnames(df)
colnames(df) = c("patient", "age", "weight", "bp", "rating", "test")
df
```

Auch `rownames()` funktioniert, aber in der Praxis werden fast immer nur Spaltennamen gesetzt. Die Zeilennamen verändert man am besten nicht, diese sind dann beginnend mit 1 aufsteigend durchnummeriert.


### Anzeigen von Data Frames

Erzeugen wir für die folgenden Beispiele nochmals ein kleines Data Frame namens `df` (beachten Sie, dass wir Zeilenumbrüche zwecks besserer Lesbarkeit einfügen können):

```{r}
df = data.frame(
    patient=c("Hans", "Birgit", "Ferdinand", "Johanna"),
    age=c(34, 17, 26, 44),
    weight=c(77, 60, 83, 64),
    height=c(175, 169, 185, 170)
)
```

Eine schnelle Übersicht über ein Data Frame bekommt man mit den Funktionen `str()`, `head()` und `tail()`.

Die Funktion `str()` stellt die *Struktur* eines Objektes knapp zusammengefasst dar:

```{r}
str(df)
```

Die Funktion `head()` gibt die ersten sechs Zeilen am Bildschirm aus, während `tail()` die letzten sechs Zeilen ausgibt. Es gibt mit dem Argument `n` auch die Möglichkeit, die Anzahl der angezeigten Zeilen anzupassen.

```{r}
l = data.frame(a=rnorm(5000), b=rpois(5000, 2), x=rep(letters, length.out=5000))
dim(l)
head(l)
tail(l, n=4)
```


### Indizieren

Auf einzelne Spalten eines Data Frames kann man mit `$` gefolgt vom Spaltennamen zugreifen (das Ergebnis ist ein Vektor):

```{r}
df$patient
df$height
```

Diese Schreibweise kann man auch anwenden, wenn man dem Data Frame eine neue Spalte hinzufügen will. Dazu gibt man einen Spaltennamen an, der noch nicht vorhanden ist, und weist diesem einen Vektor mit der entsprechenden Länge zu:

```{r}
df$value = c("yes", "no", "no", "yes")
df
```

Alternativ kann man wie bei Matrizen auch `rbind()` bzw. `cbind()` zum Hinzufügen neuer Zeilen bzw. Spalten benutzen.

Eine Spalte kann man aus einem Data Frame entfernen, indem man dieser den Wert `NULL` zuweist:

```{r}
df$value = NULL
df
```

:::{.callout-tip}
Da ein Data Frame eigentlich eine Liste ist, kann man einzelne Elemente der Liste (welche den Spalten entsprechen), auch mit folgender Syntax herausgreifen:

```{r}
df[["patient"]]
df[["height"]]
```

Dies ist also eine Alternative zur `$`-Schreibweise. Diese hat die gefährliche Eigenschaft, dass man Spaltennamen nicht komplett angeben muss, es reichen die ersten paar Buchstaben:

```{r}
df$pat  # wird automatisch auf df$patient ergänzt
```

Bei den doppelten eckigen Klammern ist das nicht der Fall:

```{r}
df[["pat"]]
```

Um Fehler zu vermeiden, sollte man daher generell die Schreibweise mit den doppelten eckigen Klammern bevorzugen.
:::

Zeilen und Spalten kann man auch per "normaler" Indizierung mit eckigen Klammern herausgreifen. Dies funktioniert wie bei Matrizen, man benötigt zwei Indizes, welche mit einem Komma voneinander getrennt sind. Die erste Zahl in den eckigen Klammern steht für die Zeile, und die zweite Zahl steht für die Spalte. Wenn ein Index weggelassen wird, werden alle Zeilen bzw. Spalten herausgegriffen:

```{r}
df[1,]
df[2:3,]
```

Spalten können somit mit dem zweiten Index indiziert werden:

```{r}
df[, 1]
df[, 4]
```

:::{.callout-important}
Das Komma darf nicht weggelassen werden, auch wenn man einen Index weglässt!
:::

Spalten (oder auch Zeilen) kann man anstelle ihrer Indizes auch mit ihren Namen ansprechen:

```{r}
df[, "patient"]
df[, "height"]
```

:::{.callout-tip}
Spalten kann man, wie bereits erwähnt, auch mit den doppelten eckigen Klammern herausgreifen. Hier kann man nicht nur den Spaltennamen, sondern auch die Spaltenposition verwenden:

```{r}
df[["patient"]]
df[[1]]
```
:::

Außerdem kann auch gezielt ein bestimmter Bereich herausgegriffen werden, wenn man sowohl Zeilen- als auch Spaltenbereiche angibt:

```{r}
df[1:2, c(1, 3:4)]
```


## Tibbles

Mit den Bordmitteln von R (d.h. mit den eingebauten Datentypen wie Data Frames sowie dazugehörigen Funktionen) kann man hervorragend arbeiten. Manchmal sind diese Konstrukte aber etwas umständlich zu verwenden, und daher bietet sich die populäre Paketsammlung namens [Tidyverse](https://www.tidyverse.org/) an, diverse Dinge zu modernisieren bzw. zu vereinfachen. Man installiert alle notwendigen Pakete aus dem Tidyverse mit dem Paket `tidyverse`. Darin enthalten ist das Paket `tibble`, welches eine moderne Alternative zu Data Frames darstellt. Insbesondere ist die Konvertierung, Erstellung und Indizierung von Tibbles nachvollziehbarer, und die Darstellung von Tibbles am Bildschirm ist wesentlich übersichtlicher. Überall wo man Data Frames verwenden kann, kann man auch Tibbles benutzen.

Bevor man Tibbles verwenden kann, muss man entweder `tibble` oder `tidyverse` aktivieren. Letzteres aktiviert gleich alle Pakete aus dem Tidyverse.

```{r}
library(tibble)
```

Mit der Funktion `tibble()` kann man nun ein neues Tibble erstellen, ganz analog zur Funktion `data.frame()`:

```{r}
(t = tibble(
    subjects=c("Hans", "Birgit", "Ferdinand", "Johanna"),
    A=1:4,
    B=5:8,
    C=9:12,
    D=13:16,
    E=17:20
))
```

Wenn man ein Tibble am Bildschirm ausgibt, werden für jede Spalte automatisch die Datentypen angeführt.

Bei längeren Tabellen zeigt sich ein weiterer Vorteil von Tibbles: gibt man lange Tibbles am Bildschirm aus, wird die Darstellung automatisch so angepasst, dass nicht alle Zeilen/Spalten ausgegeben werden, sondern nur so viel wie möglich, um noch einen guten Überblick über die Daten zu gewährleisten. Dies sieht man beispielsweise am Datensatz `CO2`, welcher als Data Frame in R vorhanden ist:

```{r}
CO2
```

Die Darstellung von allen 84 Zeilen ist wenig übersichtlich, deswegen lässt man sich hier am besten eine Zusammenfassung mittels `str()`, `head()` oder `tail()` ausgeben. Bei Tibbles ist das nicht notwendig, wie wir gleich sehen werden. Die Funktion `as_tibble()` konvertiert ein existierendes Data Frame in ein Tibble:

```{r}
(co2_tibble = as_tibble(CO2))
```

Man erkennt, dass bei einem Tibble nur die ersten 10 Zeilen dargestellt werden, was wesentlich übersichtlicher ist. Möchte man dennoch alle Zeilen sehen, kann man entweder `print()` oder `View()` verwenden (welche auch mit Data Frames funktionieren):

```r
print(co2_tibble, n=Inf)  # n=Inf zeigt alle Zeilen an
View(co2_tibble)  # öffnet eine Tabellenansicht in RStudio
```

:::{.callout-tip}
Die Funktion `str()` liefert für Tibbles oft eine sehr unübersichtliche Zusammenfassung. Stattdessen kann man `glimpse()` aus dem Paket `tibble` verwenden (dies funktioniert sowohl für Data Frames als auch Tibbles):

```{r}
glimpse(CO2)
```
:::


## Übungen

### Übung 1

Erstellen Sie einen Vektor `u` mit den *geraden* Zahlen von 98 bis 50 (in absteigender Reihenfolge) und einen Vektor `v` mit den *geraden* Zahlen von 0 bis 48. Wandeln Sie dann beide Vektoren in Matrizen mit jeweils 5 Zeilen um (verwenden Sie dazu `dim()`). Fügen Sie anschließend `u` und `v` (in dieser Reihenfolge) spaltenweise zusammen und speichern Sie das Ergebnis in der Variablen `r` ab. Geben Sie dann `r` am Bildschirm aus. Welchen Typ hat das Objekt `r`?


### Übung 2

Beantworten Sie folgende Fragen zur Matrix `r` aus Übung 1 mit Hilfe von geeigneten R-Befehlen:

- Wie viele Zeilen und Spalten hat `r`?
- Wie viele Elemente beinhaltet `r` insgesamt?
- Wie lautet das Element in der 4. Zeile und 6. Spalte?
- Wie lauten die Zeilenmittelwerte bzw. die Spaltenmittelwerte?
- Wie lautet der Mittelwert der Elemente in den Zeilen 3–5 und Spalten 1–2 (also der Mittelwert von diesen sechs Werten)?


### Übung 3

Erstellen Sie ein Data Frame (oder Tibble) `df` mit 10 Zeilen und 3 Spalten wie folgt:

- Die erste Spalte soll `name` heißen und die Werte Ben, Emma, Luis, Mia, Paul, Hanna, Lukas, Sophia, Jonas und Emilia beinhalten.
- Die zweite Spalte `gender` soll das Geschlecht der Personen beinhalten, d.h. entweder den Buchstaben `m` oder `f`.
- Die dritte Spalte `value` soll 10 beliebige Zahlen zwischen 1 und 100 beinhalten.

Geben Sie abschließend `df` am Bildschirm aus. Welche Datentypen haben die drei Spalten?


### Übung 4

Erstellen Sie ein neues Data Frame `df_f`, welches die Zeilen aller weiblichen Personen aus `df` (aus Übung 3) enthält, und geben Sie dieses am Bildschirm aus. Verwenden Sie für die Lösung einen logischen Indexvektor, damit dies auch für beliebig lange Daten (bei denen sich männliche und weibliche Personen nicht zeilenweise abwechseln) funktioniert!

Geben Sie außerdem mindestens vier Möglichkeiten an, wie man auf die erste Spalte zugreifen kann!


### Übung 5

Erstellen Sie aus dem in R vorhandenen Data Frame `mtcars` ein neues Data Frame namens `mtcars1`, welches nur aus jenen Zeilen besteht in denen die Spalte `mpg` Werte größer als 25 aufweist. Aus wie vielen Zeilen bzw. Spalten bestehen `mtcars` bzw. `mtcars1`?


### Übung 6

Es gibt einen wesentlichen Unterschied zwischen Data Frames und Tibbles beim Indizieren mit normalen eckigen Klammern. Versuchen Sie, diesen Unterschied zu finden, in dem Sie sich den in R verfügbaren Datensatz `airquality` ansehen.

Erstellen Sie zunächst ein Tibble namens `air` aus dem Data Frame `airquality`. Greifen Sie dann aus beiden Objekten die erste Spalte `"Ozone"` heraus, und zwar mit folgenden Varianten:

- `[, 1]`
- `[, "Ozone"]`
- `$Ozone`
- `[["Ozone"]]`

Können Sie aus den Ergebnissen eine Regel ableiten, wie das Indizieren bei Data Frames bzw. Tibbles funktioniert und wo die Unterschiede bestehen? Welche Variante ist konsistenter?
